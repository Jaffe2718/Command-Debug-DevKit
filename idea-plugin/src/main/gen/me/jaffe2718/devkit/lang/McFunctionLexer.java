// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: McFunctionLexer.flex

package me.jaffe2718.devkit.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import me.jaffe2718.devkit.lang.psi.McFunctionTypes;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static me.jaffe2718.devkit.lang.psi.McFunctionTypes.*;


public class McFunctionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int WAITING_VALUE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\u10df\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\0"+
    "\1\6\1\7\1\10\3\0\1\11\1\12\3\0\1\13"+
    "\1\14\1\15\12\16\1\17\1\0\1\20\1\21\1\20"+
    "\1\0\1\22\6\23\24\24\1\25\1\26\1\27\1\30"+
    "\1\24\1\0\1\31\3\23\1\31\1\23\11\24\1\32"+
    "\1\24\2\32\7\24\1\33\1\0\1\34\1\30\6\0"+
    "\1\3\u01a2\0\2\3\326\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[768];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\5\1\1\3\2\4\1\1\2\5"+
    "\2\1\1\3\1\1\2\6\1\1\1\0\1\7\1\10"+
    "\1\0\1\3\2\0\1\3\1\0\1\11\1\0\1\5"+
    "\1\12\1\13\1\14\1\0\1\15\1\0\1\3\1\16"+
    "\1\6\2\0\2\17\2\3\1\0\2\5\1\20\1\0"+
    "\1\6\1\21\1\3\1\0\1\5\1\6\1\3\1\0"+
    "\1\5\1\6\1\3\1\0\1\5\1\6\1\3\1\0"+
    "\1\5\1\6\1\3\1\0\1\5\1\6\33\0\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\35\0\72\0\127\0\164\0\221\0\256\0\313"+
    "\0\350\0\u0105\0\u0122\0\u013f\0\127\0\u015c\0\u0179\0\u0196"+
    "\0\u01b3\0\u01d0\0\u01ed\0\u020a\0\u0227\0\u0244\0\u0261\0\221"+
    "\0\127\0\u027e\0\u029b\0\u02b8\0\u02d5\0\u02f2\0\u030f\0\u032c"+
    "\0\127\0\u0349\0\u0366\0\127\0\127\0\127\0\u0383\0\127"+
    "\0\u03a0\0\u03bd\0\127\0\u03da\0\u03f7\0\u0414\0\u0414\0\u02d5"+
    "\0\u0431\0\u044e\0\u046b\0\u0488\0\u04a5\0\127\0\u0431\0\u04c2"+
    "\0\127\0\u04df\0\u04fc\0\u0519\0\u0536\0\u0553\0\u0570\0\u058d"+
    "\0\u05aa\0\u05c7\0\u05e4\0\u0601\0\u061e\0\u063b\0\u0658\0\u0675"+
    "\0\u0692\0\u06af\0\u06cc\0\u06e9\0\u0706\0\u0723\0\u0740\0\u075d"+
    "\0\u077a\0\u0797\0\u07b4\0\u07d1\0\u07ee\0\u080b\0\u0828\0\u0845"+
    "\0\u0862\0\u087f\0\u089c\0\u08b9\0\u08d6\0\u08f3\0\u0910\0\u092d"+
    "\0\u094a\0\u0967\0\u0984\0\u09a1\0\u09be\0\u09db\0\u09f8\0\u0a15"+
    "\0\127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\5\5\1\6\1\7\1\10\2\4\1\11\1\12"+
    "\1\4\1\13\1\4\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\4\1\23\1\17\1\20\1\24\2\4"+
    "\5\5\1\6\1\7\1\10\2\4\1\11\1\12\1\4"+
    "\1\13\1\4\1\14\1\15\1\16\1\25\1\26\1\21"+
    "\1\22\1\4\1\23\1\25\1\26\1\24\27\4\1\27"+
    "\6\4\36\0\5\5\27\0\6\30\1\31\26\30\5\0"+
    "\1\32\40\0\1\33\41\0\1\34\32\0\1\35\34\0"+
    "\1\36\1\0\1\37\4\0\1\40\5\0\1\40\24\0"+
    "\1\15\44\0\2\41\17\0\1\42\1\43\1\44\1\0"+
    "\1\45\1\0\1\43\1\20\4\0\1\43\1\20\17\0"+
    "\1\42\1\20\1\44\1\0\1\45\1\0\2\20\4\0"+
    "\2\20\31\0\1\46\6\0\1\47\1\50\2\0\1\47"+
    "\42\0\1\51\2\0\1\52\52\0\1\53\15\0\1\42"+
    "\1\54\1\44\1\0\1\45\1\0\1\54\1\26\4\0"+
    "\1\54\1\26\17\0\1\42\1\26\1\44\1\0\1\45"+
    "\1\0\2\26\4\0\2\26\3\0\1\47\3\0\1\47"+
    "\27\0\2\32\1\0\1\32\1\0\30\32\23\0\2\55"+
    "\4\0\2\55\16\0\1\36\1\0\1\34\31\0\1\56"+
    "\2\0\1\57\32\0\1\60\1\0\1\61\32\0\1\36"+
    "\1\0\1\62\4\0\1\63\5\0\1\63\21\0\1\63"+
    "\4\0\1\63\5\0\1\63\26\0\2\64\4\0\2\64"+
    "\17\0\1\42\1\65\1\44\1\0\1\45\1\0\1\65"+
    "\1\20\4\0\1\65\1\20\3\0\1\47\1\66\2\0"+
    "\1\47\45\0\1\52\32\0\1\67\1\0\1\52\33\0"+
    "\1\42\1\70\1\44\1\0\1\45\1\0\1\70\1\26"+
    "\4\0\1\70\1\26\14\0\1\71\3\0\1\55\4\0"+
    "\2\55\4\0\2\55\20\0\1\57\34\0\1\61\32\0"+
    "\1\36\1\0\1\72\4\0\1\73\5\0\1\73\21\0"+
    "\1\73\4\0\1\73\5\0\1\73\20\0\1\42\1\64"+
    "\4\0\2\64\4\0\2\64\17\0\1\42\1\74\1\44"+
    "\1\0\1\45\1\0\1\74\1\20\4\0\1\74\1\20"+
    "\17\0\1\42\1\75\1\44\1\0\1\45\1\0\1\75"+
    "\1\26\4\0\1\75\1\26\16\0\1\36\1\0\1\76"+
    "\4\0\1\77\5\0\1\77\21\0\1\77\4\0\1\77"+
    "\5\0\1\77\20\0\1\42\1\100\1\44\1\0\1\45"+
    "\1\0\1\100\1\20\4\0\1\100\1\20\17\0\1\42"+
    "\1\101\1\44\1\0\1\45\1\0\1\101\1\26\4\0"+
    "\1\101\1\26\16\0\1\36\1\0\1\102\4\0\1\103"+
    "\5\0\1\103\21\0\1\103\4\0\1\103\5\0\1\103"+
    "\20\0\1\42\1\104\1\44\1\0\1\45\1\0\1\104"+
    "\1\20\4\0\1\104\1\20\17\0\1\42\1\105\1\44"+
    "\1\0\1\45\1\0\1\105\1\26\4\0\1\105\1\26"+
    "\16\0\1\36\1\0\1\106\4\0\1\107\5\0\1\107"+
    "\21\0\1\107\4\0\1\107\5\0\1\107\20\0\1\42"+
    "\1\110\1\44\1\0\1\45\1\0\1\110\1\20\4\0"+
    "\1\110\1\20\17\0\1\42\1\111\1\44\1\0\1\45"+
    "\1\0\1\111\1\26\4\0\1\111\1\26\16\0\1\36"+
    "\1\0\1\112\4\0\1\113\5\0\1\113\21\0\1\113"+
    "\4\0\1\113\5\0\1\113\20\0\1\42\1\114\1\44"+
    "\1\0\1\45\1\0\1\114\1\20\4\0\1\114\1\20"+
    "\17\0\1\42\1\115\1\44\1\0\1\45\1\0\1\115"+
    "\1\26\4\0\1\115\1\26\15\0\1\116\1\36\1\0"+
    "\1\34\31\0\1\116\34\0\1\116\1\0\1\42\1\20"+
    "\1\44\1\0\1\45\1\0\2\20\4\0\2\20\15\0"+
    "\1\116\1\0\1\42\1\26\1\44\1\0\1\45\1\0"+
    "\2\26\4\0\2\26\20\0\1\117\4\0\1\117\5\0"+
    "\1\117\21\0\1\120\4\0\1\120\5\0\1\120\21\0"+
    "\1\121\4\0\1\121\5\0\1\121\21\0\1\122\4\0"+
    "\1\122\5\0\1\122\16\0\1\123\37\0\1\124\4\0"+
    "\1\124\5\0\1\124\21\0\1\125\4\0\1\125\5\0"+
    "\1\125\21\0\1\126\4\0\1\126\5\0\1\126\21\0"+
    "\1\127\4\0\1\127\5\0\1\127\16\0\1\130\37\0"+
    "\1\131\4\0\1\131\5\0\1\131\21\0\1\132\4\0"+
    "\1\132\5\0\1\132\21\0\1\133\4\0\1\133\5\0"+
    "\1\133\21\0\1\134\4\0\1\134\5\0\1\134\16\0"+
    "\1\135\37\0\1\136\4\0\1\136\5\0\1\136\21\0"+
    "\1\137\4\0\1\137\5\0\1\137\21\0\1\140\4\0"+
    "\1\140\5\0\1\140\21\0\1\141\4\0\1\141\5\0"+
    "\1\141\21\0\1\142\4\0\1\142\5\0\1\142\21\0"+
    "\1\143\4\0\1\143\5\0\1\143\21\0\1\144\4\0"+
    "\1\144\5\0\1\144\21\0\1\145\4\0\1\145\5\0"+
    "\1\145\21\0\1\146\4\0\1\146\5\0\1\146\21\0"+
    "\1\147\4\0\1\147\5\0\1\147\21\0\1\150\4\0"+
    "\1\150\5\0\1\150\21\0\1\151\4\0\1\151\5\0"+
    "\1\151\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[2610];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\10\1\1\11\12\1\1\0\1\11\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\11\1\0\1\1"+
    "\3\11\1\0\1\11\1\0\1\1\1\11\1\1\2\0"+
    "\4\1\1\0\2\1\1\11\1\0\1\1\1\11\1\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\2\1\33\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[105];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public McFunctionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return EX_SYNTAX;
            }
          // fall through
          case 19: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 20: break;
          case 3:
            { return NUMBER;
            }
          // fall through
          case 21: break;
          case 4:
            { return OPERATOR;
            }
          // fall through
          case 22: break;
          case 5:
            { return ELEMENT;
            }
          // fall through
          case 23: break;
          case 6:
            { return COMMAND_NAME;
            }
          // fall through
          case 24: break;
          case 7:
            { return STRING;
            }
          // fall through
          case 25: break;
          case 8:
            { yybegin(YYINITIAL); return McFunctionTypes.COMMENT;
            }
          // fall through
          case 26: break;
          case 9:
            { return REF;
            }
          // fall through
          case 27: break;
          case 10:
            { return NAMESPACE;
            }
          // fall through
          case 28: break;
          case 11:
            { return TAG;
            }
          // fall through
          case 29: break;
          case 12:
            { return EMPTY_LIST;
            }
          // fall through
          case 30: break;
          case 13:
            { return CONTINUATION;
            }
          // fall through
          case 31: break;
          case 14:
            { return EMPTY_NBT;
            }
          // fall through
          case 32: break;
          case 15:
            { return RANGE;
            }
          // fall through
          case 33: break;
          case 16:
            { return BAD_CHARACTER;
            }
          // fall through
          case 34: break;
          case 17:
            { return MACRO;
            }
          // fall through
          case 35: break;
          case 18:
            { return UUID;
            }
          // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
