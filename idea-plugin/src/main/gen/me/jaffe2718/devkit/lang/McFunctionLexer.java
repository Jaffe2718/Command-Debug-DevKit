// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: McFunctionLexer.flex

package me.jaffe2718.devkit.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import me.jaffe2718.devkit.lang.psi.McFunctionTypes;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static me.jaffe2718.devkit.lang.psi.McFunctionTypes.*;


public class McFunctionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMAND_LINE = 2;
  public static final int MESSAGE_ARGS = 4;
  public static final int MESSAGES = 6;
  public static final int MACRO_LINE = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\5\22\0\1\6"+
    "\1\0\1\7\1\10\1\11\3\0\1\12\1\13\3\0"+
    "\1\14\1\15\1\16\12\17\1\20\1\0\1\21\1\22"+
    "\1\21\1\0\1\23\6\24\24\25\1\26\1\27\1\30"+
    "\1\31\1\25\1\0\1\32\3\33\1\34\1\33\1\35"+
    "\4\36\1\37\1\40\2\36\1\41\1\36\1\41\1\42"+
    "\1\43\2\36\1\44\1\36\1\45\1\36\1\46\1\0"+
    "\1\47\1\31\6\0\1\3\32\0\1\50\u01df\0\1\50"+
    "\177\0\13\50\35\0\2\3\5\0\1\50\57\0\1\50"+
    "\240\0\1\50\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\1\1\1\2\1\1\1\3\4\4\1\5\1\2"+
    "\1\6\3\1\1\7\2\10\1\1\2\11\2\1\1\7"+
    "\1\1\1\12\3\1\1\13\2\14\1\1\2\15\1\1"+
    "\1\13\1\1\1\16\1\17\1\16\1\20\1\12\2\20"+
    "\1\0\3\21\3\4\1\0\1\22\1\7\2\0\1\7"+
    "\1\0\2\7\1\23\1\0\1\11\1\24\1\25\1\26"+
    "\1\0\1\27\2\0\1\7\1\30\1\0\1\31\1\13"+
    "\2\0\1\13\1\0\2\13\1\32\1\0\1\15\1\33"+
    "\1\34\1\35\1\0\1\13\1\36\3\37\2\20\1\40"+
    "\1\41\1\4\1\0\2\42\2\7\1\0\1\7\2\11"+
    "\2\0\2\43\2\13\1\0\1\13\2\15\1\0\1\44"+
    "\2\20\1\7\1\0\1\7\1\11\1\7\1\13\1\0"+
    "\1\13\1\15\1\13\1\45\1\7\1\0\1\7\1\11"+
    "\1\13\1\0\1\13\1\15\1\7\1\0\1\7\1\11"+
    "\1\13\1\0\1\13\1\15\1\7\1\0\1\7\1\11"+
    "\1\13\1\0\1\13\1\15\1\7\1\0\1\7\1\11"+
    "\1\13\1\0\1\13\1\15\66\0\1\46\1\47";

  private static int [] zzUnpackAction() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\51\0\122\0\173\0\244\0\315\0\366\0\u011f"+
    "\0\315\0\u0148\0\u0171\0\u019a\0\u01c3\0\u0148\0\u01ec\0\315"+
    "\0\u0215\0\u023e\0\u0267\0\u0290\0\u02b9\0\315\0\u02e2\0\u030b"+
    "\0\u0334\0\u035d\0\u0386\0\u03af\0\u03d8\0\315\0\u0401\0\u042a"+
    "\0\u0453\0\u047c\0\u04a5\0\315\0\u04ce\0\u04f7\0\u0520\0\u0549"+
    "\0\u0572\0\u059b\0\u05c4\0\u05ed\0\u0386\0\u0616\0\u01ec\0\u063f"+
    "\0\u0668\0\u011f\0\315\0\u011f\0\u0691\0\u06ba\0\u06e3\0\u070c"+
    "\0\u0215\0\315\0\u0735\0\u075e\0\u0787\0\u07b0\0\u07d9\0\u07d9"+
    "\0\315\0\315\0\u0802\0\u082b\0\315\0\315\0\315\0\u0386"+
    "\0\315\0\u0854\0\u087d\0\u08a6\0\315\0\u0401\0\315\0\u08cf"+
    "\0\u08f8\0\u0921\0\u094a\0\u0973\0\u0973\0\315\0\315\0\u099c"+
    "\0\u09c5\0\315\0\315\0\315\0\u09ee\0\u0a17\0\315\0\315"+
    "\0\u05c4\0\u0a40\0\u0a69\0\u0a92\0\315\0\u0148\0\u0abb\0\u0ae4"+
    "\0\u0ae4\0\u075e\0\u0b0d\0\u0b36\0\u0b5f\0\u0b5f\0\u0b88\0\u0bb1"+
    "\0\u0bda\0\u0c03\0\u0c03\0\u08f8\0\u0c2c\0\u0c55\0\u0c7e\0\u0c7e"+
    "\0\u0ca7\0\u0cd0\0\u0cf9\0\315\0\u0d22\0\u0d4b\0\u0d74\0\u0d9d"+
    "\0\u0d9d\0\u0dc6\0\u0bda\0\u0def\0\u0e18\0\u0e18\0\u0e41\0\u0cf9"+
    "\0\u0616\0\u0e6a\0\u0e93\0\u0e93\0\u0ebc\0\u0ee5\0\u0f0e\0\u0f0e"+
    "\0\u0f37\0\u0f60\0\u0f89\0\u0f89\0\u0fb2\0\u0fdb\0\u1004\0\u1004"+
    "\0\u102d\0\u1056\0\u107f\0\u107f\0\u10a8\0\u10d1\0\u10fa\0\u10fa"+
    "\0\u1123\0\u114c\0\u1175\0\u1175\0\u119e\0\u11c7\0\u11f0\0\u11f0"+
    "\0\u1219\0\u1242\0\u126b\0\u1294\0\u12bd\0\u12e6\0\u130f\0\u1338"+
    "\0\u1361\0\u138a\0\u13b3\0\u13dc\0\u1405\0\u142e\0\u1457\0\u1480"+
    "\0\u14a9\0\u14d2\0\u14fb\0\u1524\0\u154d\0\u1576\0\u159f\0\u15c8"+
    "\0\u15f1\0\u161a\0\u1643\0\u166c\0\u1695\0\u16be\0\u16e7\0\u1710"+
    "\0\u1739\0\u1762\0\u178b\0\u17b4\0\u17dd\0\u1806\0\u182f\0\u1858"+
    "\0\u1881\0\u18aa\0\u18d3\0\u18fc\0\u1925\0\u194e\0\u1977\0\u19a0"+
    "\0\u19c9\0\u19f2\0\u1a1b\0\u1a44\0\u1a6d\0\u1a96\0\u1abf\0\315"+
    "\0\315";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\6\7\1\6\1\10\1\11\12\6\2\12\4\6"+
    "\6\12\1\13\1\12\1\14\1\15\1\16\1\12\5\6"+
    "\1\17\2\6\1\17\1\20\1\21\4\6\1\22\1\23"+
    "\1\6\1\24\1\6\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\6\1\34\3\30\11\31\1\35\10\6"+
    "\1\36\1\37\4\6\1\40\1\41\1\6\1\42\1\6"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\33\1\6"+
    "\1\51\3\46\11\47\1\52\2\6\1\53\1\6\1\54"+
    "\2\6\1\54\1\36\20\53\1\55\20\53\1\6\1\56"+
    "\1\36\1\57\2\36\1\57\1\36\2\56\1\60\15\56"+
    "\1\61\20\56\1\36\52\0\6\7\42\0\2\62\1\63"+
    "\2\64\1\65\43\62\17\0\1\12\4\0\2\12\4\0"+
    "\14\12\22\0\1\12\4\0\2\12\4\0\10\12\1\66"+
    "\3\12\22\0\1\12\4\0\2\12\4\0\1\67\13\12"+
    "\22\0\1\12\4\0\2\12\4\0\2\12\1\70\11\12"+
    "\5\0\1\17\2\0\1\17\43\0\7\71\1\72\41\71"+
    "\17\0\1\73\46\0\1\74\50\0\1\75\1\0\1\76"+
    "\4\0\1\77\5\0\3\100\11\101\25\0\1\26\60\0"+
    "\1\102\1\0\1\102\4\0\2\102\24\0\1\103\1\104"+
    "\1\105\1\0\1\106\1\0\1\104\1\31\4\0\3\104"+
    "\11\31\21\0\1\103\1\31\1\105\1\0\1\106\1\0"+
    "\2\31\4\0\14\31\33\0\1\107\21\0\1\110\1\111"+
    "\1\0\1\110\1\112\1\110\56\0\1\113\2\0\1\114"+
    "\100\0\1\115\1\0\7\116\1\117\41\116\17\0\1\120"+
    "\46\0\1\121\50\0\1\122\1\0\1\123\4\0\1\124"+
    "\5\0\3\125\11\126\25\0\1\44\60\0\1\127\1\0"+
    "\1\127\4\0\2\127\24\0\1\130\1\131\1\132\1\0"+
    "\1\133\1\0\1\131\1\47\4\0\3\131\11\47\21\0"+
    "\1\130\1\47\1\132\1\0\1\133\1\0\2\47\4\0"+
    "\14\47\33\0\1\134\34\0\1\135\2\0\1\136\100\0"+
    "\1\137\1\0\2\53\1\140\2\141\1\142\21\53\1\0"+
    "\21\53\2\0\1\54\2\0\1\54\43\0\1\56\6\0"+
    "\41\56\1\0\1\56\6\0\3\56\1\143\33\56\1\144"+
    "\1\56\1\0\1\56\1\110\1\111\1\0\1\110\1\112"+
    "\1\110\41\56\3\0\1\145\65\0\1\12\4\0\2\12"+
    "\4\0\3\12\1\16\10\12\22\0\1\12\4\0\2\12"+
    "\4\0\13\12\1\146\22\0\1\12\4\0\2\12\4\0"+
    "\5\12\1\147\6\12\20\0\1\75\1\0\1\73\12\0"+
    "\14\101\17\0\1\150\2\0\1\151\46\0\1\152\1\0"+
    "\1\153\46\0\1\75\1\0\1\154\4\0\1\155\5\0"+
    "\3\156\11\101\22\0\1\155\4\0\1\155\5\0\3\155"+
    "\40\0\2\157\4\0\14\157\21\0\1\103\1\160\1\105"+
    "\1\0\1\106\1\0\1\160\1\31\4\0\3\160\11\31"+
    "\5\0\1\111\65\0\1\114\46\0\1\161\1\0\1\114"+
    "\46\0\1\122\1\0\1\120\12\0\14\126\17\0\1\162"+
    "\2\0\1\163\46\0\1\164\1\0\1\165\46\0\1\122"+
    "\1\0\1\166\4\0\1\167\5\0\3\170\11\126\22\0"+
    "\1\167\4\0\1\167\5\0\3\167\40\0\2\171\4\0"+
    "\14\171\21\0\1\130\1\172\1\132\1\0\1\133\1\0"+
    "\1\172\1\47\4\0\3\172\11\47\22\0\1\136\46\0"+
    "\1\173\1\0\1\136\33\0\1\174\46\0\1\56\6\0"+
    "\15\56\2\175\4\56\14\175\2\56\1\0\1\56\6\0"+
    "\15\56\2\176\4\56\14\176\2\56\20\0\1\12\4\0"+
    "\2\12\4\0\5\12\1\16\6\12\22\0\1\151\50\0"+
    "\1\153\12\0\14\101\20\0\1\75\1\0\1\177\4\0"+
    "\1\200\5\0\3\201\11\101\22\0\1\200\4\0\1\200"+
    "\5\0\3\200\32\0\1\103\1\157\4\0\2\157\4\0"+
    "\14\157\21\0\1\103\1\202\1\105\1\0\1\106\1\0"+
    "\1\202\1\31\4\0\3\202\11\31\22\0\1\203\50\0"+
    "\1\163\50\0\1\165\12\0\14\126\20\0\1\122\1\0"+
    "\1\204\4\0\1\205\5\0\3\206\11\126\22\0\1\205"+
    "\4\0\1\205\5\0\3\205\32\0\1\130\1\171\4\0"+
    "\2\171\4\0\14\171\21\0\1\130\1\207\1\132\1\0"+
    "\1\133\1\0\1\207\1\47\4\0\3\207\11\47\22\0"+
    "\1\210\31\0\1\56\6\0\4\56\1\211\3\56\1\175"+
    "\4\56\2\175\4\56\14\175\2\56\1\0\1\56\6\0"+
    "\10\56\1\176\4\56\2\176\4\56\14\176\1\56\1\211"+
    "\16\0\1\75\1\0\1\212\4\0\1\213\5\0\3\214"+
    "\11\101\22\0\1\213\4\0\1\213\5\0\3\213\32\0"+
    "\1\103\1\215\1\105\1\0\1\106\1\0\1\215\1\31"+
    "\4\0\3\215\11\31\20\0\1\122\1\0\1\216\4\0"+
    "\1\217\5\0\3\220\11\126\22\0\1\217\4\0\1\217"+
    "\5\0\3\217\32\0\1\130\1\221\1\132\1\0\1\133"+
    "\1\0\1\221\1\47\4\0\3\221\11\47\20\0\1\75"+
    "\1\0\1\222\4\0\1\223\5\0\3\224\11\101\22\0"+
    "\1\223\4\0\1\223\5\0\3\223\32\0\1\103\1\225"+
    "\1\105\1\0\1\106\1\0\1\225\1\31\4\0\3\225"+
    "\11\31\20\0\1\122\1\0\1\226\4\0\1\227\5\0"+
    "\3\230\11\126\22\0\1\227\4\0\1\227\5\0\3\227"+
    "\32\0\1\130\1\231\1\132\1\0\1\133\1\0\1\231"+
    "\1\47\4\0\3\231\11\47\20\0\1\75\1\0\1\232"+
    "\4\0\1\233\5\0\3\234\11\101\22\0\1\233\4\0"+
    "\1\233\5\0\3\233\32\0\1\103\1\235\1\105\1\0"+
    "\1\106\1\0\1\235\1\31\4\0\3\235\11\31\20\0"+
    "\1\122\1\0\1\236\4\0\1\237\5\0\3\240\11\126"+
    "\22\0\1\237\4\0\1\237\5\0\3\237\32\0\1\130"+
    "\1\241\1\132\1\0\1\133\1\0\1\241\1\47\4\0"+
    "\3\241\11\47\20\0\1\75\1\0\1\242\4\0\1\243"+
    "\5\0\3\244\11\101\22\0\1\243\4\0\1\243\5\0"+
    "\3\243\32\0\1\103\1\245\1\105\1\0\1\106\1\0"+
    "\1\245\1\31\4\0\3\245\11\31\20\0\1\122\1\0"+
    "\1\246\4\0\1\247\5\0\3\250\11\126\22\0\1\247"+
    "\4\0\1\247\5\0\3\247\32\0\1\130\1\251\1\132"+
    "\1\0\1\133\1\0\1\251\1\47\4\0\3\251\11\47"+
    "\17\0\1\252\1\75\1\0\1\73\12\0\14\101\17\0"+
    "\1\252\50\0\1\252\1\0\1\103\1\31\1\105\1\0"+
    "\1\106\1\0\2\31\4\0\14\31\17\0\1\253\1\122"+
    "\1\0\1\120\12\0\14\126\17\0\1\253\50\0\1\253"+
    "\1\0\1\130\1\47\1\132\1\0\1\133\1\0\2\47"+
    "\4\0\14\47\22\0\1\254\4\0\1\254\5\0\3\254"+
    "\33\0\1\255\4\0\1\255\5\0\3\255\33\0\1\256"+
    "\4\0\1\256\5\0\3\256\33\0\1\257\4\0\1\257"+
    "\5\0\3\257\33\0\1\260\4\0\1\260\5\0\3\260"+
    "\33\0\1\261\4\0\1\261\5\0\3\261\33\0\1\262"+
    "\4\0\1\262\5\0\3\262\33\0\1\263\4\0\1\263"+
    "\5\0\3\263\30\0\1\264\50\0\1\265\53\0\1\266"+
    "\4\0\1\266\5\0\3\266\33\0\1\267\4\0\1\267"+
    "\5\0\3\267\33\0\1\270\4\0\1\270\5\0\3\270"+
    "\33\0\1\271\4\0\1\271\5\0\3\271\33\0\1\272"+
    "\4\0\1\272\5\0\3\272\33\0\1\273\4\0\1\273"+
    "\5\0\3\273\33\0\1\274\4\0\1\274\5\0\3\274"+
    "\33\0\1\275\4\0\1\275\5\0\3\275\30\0\1\276"+
    "\50\0\1\277\53\0\1\300\4\0\1\300\5\0\3\300"+
    "\33\0\1\301\4\0\1\301\5\0\3\301\33\0\1\302"+
    "\4\0\1\302\5\0\3\302\33\0\1\303\4\0\1\303"+
    "\5\0\3\303\33\0\1\304\4\0\1\304\5\0\3\304"+
    "\33\0\1\305\4\0\1\305\5\0\3\305\33\0\1\306"+
    "\4\0\1\306\5\0\3\306\33\0\1\307\4\0\1\307"+
    "\5\0\3\307\30\0\1\310\50\0\1\311\53\0\1\312"+
    "\4\0\1\312\5\0\3\312\33\0\1\313\4\0\1\313"+
    "\5\0\3\313\33\0\1\314\4\0\1\314\5\0\3\314"+
    "\33\0\1\315\4\0\1\315\5\0\3\315\33\0\1\316"+
    "\4\0\1\316\5\0\3\316\33\0\1\317\4\0\1\317"+
    "\5\0\3\317\33\0\1\320\4\0\1\320\5\0\3\320"+
    "\33\0\1\321\4\0\1\321\5\0\3\321\33\0\1\322"+
    "\4\0\1\322\5\0\3\322\33\0\1\323\4\0\1\323"+
    "\5\0\3\323\33\0\1\324\4\0\1\324\5\0\3\324"+
    "\33\0\1\325\4\0\1\325\5\0\3\325\33\0\1\326"+
    "\4\0\1\326\5\0\3\326\33\0\1\327\4\0\1\327"+
    "\5\0\3\327\33\0\1\330\4\0\1\330\5\0\3\330"+
    "\33\0\1\331\4\0\1\331\5\0\3\331\33\0\1\332"+
    "\4\0\1\332\5\0\3\332\33\0\1\333\4\0\1\333"+
    "\5\0\3\333\33\0\1\334\4\0\1\334\5\0\3\334"+
    "\33\0\1\335\4\0\1\335\5\0\3\335\33\0\1\336"+
    "\4\0\1\336\5\0\3\336\33\0\1\337\4\0\1\337"+
    "\5\0\3\337\33\0\1\340\4\0\1\340\5\0\3\340"+
    "\33\0\1\341\4\0\1\341\5\0\3\341\14\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6888];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\2\1\1\11\6\1\1\11\5\1\1\11"+
    "\7\1\1\11\5\1\1\11\15\1\1\0\1\11\5\1"+
    "\1\0\1\11\1\1\2\0\1\1\1\0\1\1\2\11"+
    "\1\0\1\1\3\11\1\0\1\11\2\0\1\1\1\11"+
    "\1\0\1\11\1\1\2\0\1\1\1\0\1\1\2\11"+
    "\1\0\1\1\3\11\1\0\1\1\2\11\4\1\1\11"+
    "\2\1\1\0\4\1\1\0\3\1\2\0\4\1\1\0"+
    "\3\1\1\0\1\11\3\1\1\0\4\1\1\0\5\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\3\1\1\0\2\1"+
    "\66\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[225];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public McFunctionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return EX_SYNTAX;
            }
          // fall through
          case 40: break;
          case 2:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 41: break;
          case 3:
            { yybegin(MACRO_LINE); return MACRO_START;
            }
          // fall through
          case 42: break;
          case 4:
            { yybegin(COMMAND_LINE); return COMMAND_NAME;
            }
          // fall through
          case 43: break;
          case 5:
            { yybegin(MESSAGE_ARGS); return COMMAND_NAME;
            }
          // fall through
          case 44: break;
          case 6:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 45: break;
          case 7:
            { return NUMBER;
            }
          // fall through
          case 46: break;
          case 8:
            { return OPERATOR;
            }
          // fall through
          case 47: break;
          case 9:
            { return ELEMENT;
            }
          // fall through
          case 48: break;
          case 10:
            { return WHITE_SPACE;
            }
          // fall through
          case 49: break;
          case 11:
            { yybegin(MESSAGES); return NUMBER;
            }
          // fall through
          case 50: break;
          case 12:
            { yybegin(MESSAGES); return OPERATOR;
            }
          // fall through
          case 51: break;
          case 13:
            { yybegin(MESSAGES); return ELEMENT;
            }
          // fall through
          case 52: break;
          case 14:
            { return McFunctionTypes.MESSAGES;
            }
          // fall through
          case 53: break;
          case 15:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 54: break;
          case 16:
            { return STATIC_TEXT;
            }
          // fall through
          case 55: break;
          case 17:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return McFunctionTypes.COMMENT;
            }
          // fall through
          case 56: break;
          case 18:
            { return STRING;
            }
          // fall through
          case 57: break;
          case 19:
            { return REF;
            }
          // fall through
          case 58: break;
          case 20:
            { return NAMESPACE;
            }
          // fall through
          case 59: break;
          case 21:
            { return TAG;
            }
          // fall through
          case 60: break;
          case 22:
            { return EMPTY_LIST;
            }
          // fall through
          case 61: break;
          case 23:
            { return CONTINUATION;
            }
          // fall through
          case 62: break;
          case 24:
            { return EMPTY_NBT;
            }
          // fall through
          case 63: break;
          case 25:
            { yybegin(MESSAGES); return STRING;
            }
          // fall through
          case 64: break;
          case 26:
            { yybegin(MESSAGES); return REF;
            }
          // fall through
          case 65: break;
          case 27:
            { yybegin(MESSAGES); return NAMESPACE;
            }
          // fall through
          case 66: break;
          case 28:
            { yybegin(MESSAGES); return TAG;
            }
          // fall through
          case 67: break;
          case 29:
            { yybegin(MESSAGES); return EMPTY_LIST;
            }
          // fall through
          case 68: break;
          case 30:
            { yybegin(MESSAGES); return EMPTY_NBT;
            }
          // fall through
          case 69: break;
          case 31:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(YYINITIAL); return McFunctionTypes.MESSAGES;
            }
          // fall through
          case 70: break;
          case 32:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return McFunctionTypes.COMMENT;
            }
          // fall through
          case 71: break;
          case 33:
            { yybegin(MESSAGES); return COMMAND_NAME;
            }
          // fall through
          case 72: break;
          case 34:
            { return RANGE;
            }
          // fall through
          case 73: break;
          case 35:
            { yybegin(MESSAGES); return RANGE;
            }
          // fall through
          case 74: break;
          case 36:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -2);
            { yybegin(YYINITIAL); return McFunctionTypes.MESSAGES;
            }
          // fall through
          case 75: break;
          case 37:
            { return MACRO;
            }
          // fall through
          case 76: break;
          case 38:
            { return UUID;
            }
          // fall through
          case 77: break;
          case 39:
            { yybegin(MESSAGES); return UUID;
            }
          // fall through
          case 78: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
