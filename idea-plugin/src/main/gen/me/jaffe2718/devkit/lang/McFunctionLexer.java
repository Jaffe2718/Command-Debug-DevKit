// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: McFunctionLexer.flex

package me.jaffe2718.devkit.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import me.jaffe2718.devkit.lang.psi.McFunctionTypes;
import com.intellij.psi.TokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static me.jaffe2718.devkit.lang.psi.McFunctionTypes.*;


public class McFunctionLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int MESSAGE_ARGS = 2;
  public static final int MESSAGES = 4;
  public static final int MACRO_LINE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  1,  2,  2,  3,  3,  4, 4
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\u10cf\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\22\0\1\5"+
    "\1\0\1\6\1\7\1\10\3\0\1\11\1\12\3\0"+
    "\1\13\1\14\1\15\12\16\1\17\1\0\1\20\1\21"+
    "\1\20\1\0\1\22\6\23\24\24\1\25\1\26\1\27"+
    "\1\30\1\24\1\0\1\31\3\23\1\32\1\23\1\33"+
    "\5\24\1\34\2\24\1\35\1\24\1\35\1\36\3\24"+
    "\1\37\1\24\1\40\1\24\1\41\1\0\1\42\1\30"+
    "\6\0\1\3\32\0\1\43\u01df\0\1\43\177\0\13\43"+
    "\35\0\2\3\5\0\1\43\57\0\1\43\240\0\1\43"+
    "\377\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\4\2\1\4\2\5\1\2"+
    "\2\6\2\2\1\4\1\2\1\7\4\10\1\11\1\12"+
    "\3\2\1\13\2\14\1\2\2\15\1\2\1\13\1\2"+
    "\1\16\1\17\1\1\1\12\3\1\1\0\1\20\1\21"+
    "\1\4\2\0\1\4\1\0\1\22\1\0\1\6\1\23"+
    "\1\24\1\25\1\0\1\26\3\0\1\4\1\27\3\10"+
    "\1\0\1\30\1\13\2\0\1\13\1\0\1\31\1\0"+
    "\1\15\1\32\1\33\1\34\1\0\1\13\1\35\1\3"+
    "\3\1\1\0\2\36\2\4\1\0\2\6\2\0\1\10"+
    "\1\37\1\0\2\40\2\13\1\0\2\15\1\0\2\1"+
    "\1\4\1\0\1\6\1\10\1\13\1\0\1\15\1\41"+
    "\1\4\1\0\1\6\1\10\1\13\1\0\1\15\1\4"+
    "\1\0\1\6\1\10\1\13\1\0\1\15\1\4\1\0"+
    "\1\6\1\10\1\13\1\0\1\15\1\4\1\0\1\6"+
    "\1\10\1\13\1\0\1\15\66\0\1\42\1\43";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\110\0\154\0\220\0\264\0\330\0\374"+
    "\0\u0120\0\u0144\0\u0168\0\u018c\0\u01b0\0\264\0\u01d4\0\u01f8"+
    "\0\u021c\0\u0240\0\u0264\0\u0288\0\u02ac\0\264\0\u02d0\0\u02f4"+
    "\0\u0318\0\u033c\0\u02f4\0\264\0\u0360\0\u0384\0\u03a8\0\u03cc"+
    "\0\u03f0\0\264\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8"+
    "\0\u04ec\0\u0510\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\374"+
    "\0\264\0\u05e8\0\u060c\0\u0630\0\u0654\0\u0678\0\u069c\0\264"+
    "\0\u06c0\0\u06e4\0\264\0\264\0\264\0\u0264\0\264\0\u0708"+
    "\0\u072c\0\u0750\0\u0774\0\264\0\u0798\0\u07bc\0\u07e0\0\u0360"+
    "\0\264\0\u0804\0\u0828\0\u084c\0\u0870\0\u0894\0\264\0\u08b8"+
    "\0\u08dc\0\264\0\264\0\264\0\u0900\0\u0924\0\264\0\u0558"+
    "\0\u0948\0\u096c\0\u0990\0\u09b4\0\u09b4\0\u0630\0\u09d8\0\u09fc"+
    "\0\u0a20\0\u0a44\0\u0a68\0\u0a8c\0\u09d8\0\u0ab0\0\u02f4\0\u0ad4"+
    "\0\u0ad4\0\u0828\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0af8"+
    "\0\u0bac\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\u0c84\0\u0ca8"+
    "\0\u0ccc\0\u0534\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4"+
    "\0\u0dc8\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4"+
    "\0\u0ee8\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4"+
    "\0\u1008\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104"+
    "\0\u1128\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224"+
    "\0\u1248\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344"+
    "\0\u1368\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464"+
    "\0\u1488\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584"+
    "\0\u15a8\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4"+
    "\0\u16c8\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0\0\u17c4"+
    "\0\u17e8\0\u180c\0\u1830\0\u1854\0\264\0\264";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\5\7\1\10\1\11\3\6\1\12\1\13\1\6"+
    "\1\14\1\6\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\6\1\24\2\20\6\21\1\25\3\6\5\7"+
    "\1\10\1\11\1\26\2\6\1\12\1\13\1\6\1\14"+
    "\1\6\1\15\1\16\1\17\1\27\1\30\1\22\1\23"+
    "\1\6\1\24\2\27\1\30\1\31\1\30\1\32\1\33"+
    "\1\30\1\25\7\6\1\34\1\35\4\6\1\36\1\37"+
    "\1\6\1\40\1\6\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\2\6\1\47\2\44\6\45\1\50\2\6\1\51"+
    "\1\6\1\52\1\6\1\52\1\34\35\51\1\6\1\53"+
    "\1\34\1\54\1\34\1\54\1\34\1\53\1\55\1\56"+
    "\15\53\1\57\14\53\1\34\45\0\5\7\36\0\6\60"+
    "\1\61\35\60\5\0\1\62\54\0\1\63\41\0\1\64"+
    "\43\0\1\65\1\0\1\66\4\0\1\67\5\0\2\67"+
    "\32\0\1\16\53\0\2\70\2\0\2\70\22\0\1\71"+
    "\1\72\1\73\1\0\1\74\1\0\1\72\1\21\4\0"+
    "\2\72\6\21\20\0\1\71\1\21\1\73\1\0\1\74"+
    "\1\0\2\21\4\0\10\21\32\0\1\75\15\0\1\76"+
    "\1\77\1\0\1\100\1\76\1\0\1\101\47\0\1\102"+
    "\2\0\1\103\67\0\1\104\16\0\1\71\1\105\1\73"+
    "\1\0\1\74\1\0\1\105\1\30\4\0\2\105\6\30"+
    "\20\0\1\71\1\30\1\73\1\0\1\74\1\0\2\30"+
    "\4\0\10\30\20\0\1\71\1\30\1\73\1\0\1\74"+
    "\1\0\2\30\4\0\5\30\1\106\2\30\20\0\1\71"+
    "\1\30\1\73\1\0\1\74\1\0\2\30\4\0\1\107"+
    "\7\30\3\0\6\110\1\111\35\110\16\0\1\112\41\0"+
    "\1\113\43\0\1\114\1\0\1\115\4\0\1\116\5\0"+
    "\2\116\32\0\1\42\53\0\2\117\2\0\2\117\22\0"+
    "\1\120\1\121\1\122\1\0\1\123\1\0\1\121\1\45"+
    "\4\0\2\121\6\45\20\0\1\120\1\45\1\122\1\0"+
    "\1\123\1\0\2\45\4\0\10\45\32\0\1\124\27\0"+
    "\1\125\2\0\1\126\67\0\1\127\1\0\2\51\1\0"+
    "\1\51\1\0\37\51\2\0\1\52\1\0\1\52\37\0"+
    "\1\53\5\0\35\53\3\0\1\130\1\0\1\130\37\0"+
    "\1\53\4\0\1\62\35\53\1\0\1\53\5\0\3\53"+
    "\1\131\27\53\1\132\1\53\1\0\1\53\1\76\1\77"+
    "\1\0\1\100\1\76\1\53\1\133\33\53\1\0\2\62"+
    "\1\0\1\62\1\0\37\62\14\0\1\65\1\0\1\63"+
    "\40\0\1\134\2\0\1\135\41\0\1\136\1\0\1\137"+
    "\41\0\1\65\1\0\1\140\4\0\1\141\5\0\2\141"+
    "\27\0\1\141\4\0\1\141\5\0\2\141\34\0\2\142"+
    "\4\0\10\142\20\0\1\71\1\143\1\73\1\0\1\74"+
    "\1\0\1\143\1\21\4\0\2\143\6\21\5\0\1\77"+
    "\46\0\1\144\54\0\1\103\41\0\1\145\1\0\1\103"+
    "\42\0\1\71\1\146\1\73\1\0\1\74\1\0\1\146"+
    "\1\30\4\0\2\146\6\30\20\0\1\71\1\30\1\73"+
    "\1\0\1\74\1\0\2\30\4\0\2\30\1\33\5\30"+
    "\20\0\1\71\1\30\1\73\1\0\1\74\1\0\2\30"+
    "\4\0\7\30\1\147\17\0\1\114\1\0\1\112\40\0"+
    "\1\150\2\0\1\151\41\0\1\152\1\0\1\153\41\0"+
    "\1\114\1\0\1\154\4\0\1\155\5\0\2\155\27\0"+
    "\1\155\4\0\1\155\5\0\2\155\34\0\2\156\4\0"+
    "\10\156\20\0\1\120\1\157\1\122\1\0\1\123\1\0"+
    "\1\157\1\45\4\0\2\157\6\45\21\0\1\126\41\0"+
    "\1\160\1\0\1\126\25\0\1\53\5\0\15\53\2\161"+
    "\4\53\10\161\2\53\1\0\1\53\5\0\15\53\2\162"+
    "\4\53\10\162\2\53\1\0\1\53\4\0\1\144\35\53"+
    "\17\0\1\135\43\0\1\137\41\0\1\65\1\0\1\163"+
    "\4\0\1\164\5\0\2\164\27\0\1\164\4\0\1\164"+
    "\5\0\2\164\26\0\1\71\1\142\4\0\2\142\4\0"+
    "\10\142\20\0\1\71\1\165\1\73\1\0\1\74\1\0"+
    "\1\165\1\21\4\0\2\165\6\21\3\0\2\144\1\77"+
    "\1\144\1\100\37\144\15\0\1\71\1\166\1\73\1\0"+
    "\1\74\1\0\1\166\1\30\4\0\2\166\6\30\21\0"+
    "\1\151\43\0\1\153\41\0\1\114\1\0\1\167\4\0"+
    "\1\170\5\0\2\170\27\0\1\170\4\0\1\170\5\0"+
    "\2\170\26\0\1\120\1\156\4\0\2\156\4\0\10\156"+
    "\20\0\1\120\1\171\1\122\1\0\1\123\1\0\1\171"+
    "\1\45\4\0\2\171\6\45\3\0\1\53\5\0\4\53"+
    "\1\172\3\53\1\161\4\53\2\161\4\53\10\161\2\53"+
    "\1\0\1\53\5\0\10\53\1\162\4\53\2\162\4\53"+
    "\10\162\1\53\1\172\15\0\1\65\1\0\1\173\4\0"+
    "\1\174\5\0\2\174\27\0\1\174\4\0\1\174\5\0"+
    "\2\174\26\0\1\71\1\175\1\73\1\0\1\74\1\0"+
    "\1\175\1\21\4\0\2\175\6\21\20\0\1\71\1\176"+
    "\1\73\1\0\1\74\1\0\1\176\1\30\4\0\2\176"+
    "\6\30\17\0\1\114\1\0\1\177\4\0\1\200\5\0"+
    "\2\200\27\0\1\200\4\0\1\200\5\0\2\200\26\0"+
    "\1\120\1\201\1\122\1\0\1\123\1\0\1\201\1\45"+
    "\4\0\2\201\6\45\17\0\1\65\1\0\1\202\4\0"+
    "\1\203\5\0\2\203\27\0\1\203\4\0\1\203\5\0"+
    "\2\203\26\0\1\71\1\204\1\73\1\0\1\74\1\0"+
    "\1\204\1\21\4\0\2\204\6\21\20\0\1\71\1\205"+
    "\1\73\1\0\1\74\1\0\1\205\1\30\4\0\2\205"+
    "\6\30\17\0\1\114\1\0\1\206\4\0\1\207\5\0"+
    "\2\207\27\0\1\207\4\0\1\207\5\0\2\207\26\0"+
    "\1\120\1\210\1\122\1\0\1\123\1\0\1\210\1\45"+
    "\4\0\2\210\6\45\17\0\1\65\1\0\1\211\4\0"+
    "\1\212\5\0\2\212\27\0\1\212\4\0\1\212\5\0"+
    "\2\212\26\0\1\71\1\213\1\73\1\0\1\74\1\0"+
    "\1\213\1\21\4\0\2\213\6\21\20\0\1\71\1\214"+
    "\1\73\1\0\1\74\1\0\1\214\1\30\4\0\2\214"+
    "\6\30\17\0\1\114\1\0\1\215\4\0\1\216\5\0"+
    "\2\216\27\0\1\216\4\0\1\216\5\0\2\216\26\0"+
    "\1\120\1\217\1\122\1\0\1\123\1\0\1\217\1\45"+
    "\4\0\2\217\6\45\17\0\1\65\1\0\1\220\4\0"+
    "\1\221\5\0\2\221\27\0\1\221\4\0\1\221\5\0"+
    "\2\221\26\0\1\71\1\222\1\73\1\0\1\74\1\0"+
    "\1\222\1\21\4\0\2\222\6\21\20\0\1\71\1\223"+
    "\1\73\1\0\1\74\1\0\1\223\1\30\4\0\2\223"+
    "\6\30\17\0\1\114\1\0\1\224\4\0\1\225\5\0"+
    "\2\225\27\0\1\225\4\0\1\225\5\0\2\225\26\0"+
    "\1\120\1\226\1\122\1\0\1\123\1\0\1\226\1\45"+
    "\4\0\2\226\6\45\16\0\1\227\1\65\1\0\1\63"+
    "\40\0\1\227\43\0\1\227\1\0\1\71\1\21\1\73"+
    "\1\0\1\74\1\0\2\21\4\0\10\21\16\0\1\227"+
    "\1\0\1\71\1\30\1\73\1\0\1\74\1\0\2\30"+
    "\4\0\10\30\16\0\1\230\1\114\1\0\1\112\40\0"+
    "\1\230\43\0\1\230\1\0\1\120\1\45\1\122\1\0"+
    "\1\123\1\0\2\45\4\0\10\45\21\0\1\231\4\0"+
    "\1\231\5\0\2\231\27\0\1\232\4\0\1\232\5\0"+
    "\2\232\27\0\1\233\4\0\1\233\5\0\2\233\27\0"+
    "\1\234\4\0\1\234\5\0\2\234\27\0\1\235\4\0"+
    "\1\235\5\0\2\235\27\0\1\236\4\0\1\236\5\0"+
    "\2\236\27\0\1\237\4\0\1\237\5\0\2\237\27\0"+
    "\1\240\4\0\1\240\5\0\2\240\24\0\1\241\43\0"+
    "\1\242\46\0\1\243\4\0\1\243\5\0\2\243\27\0"+
    "\1\244\4\0\1\244\5\0\2\244\27\0\1\245\4\0"+
    "\1\245\5\0\2\245\27\0\1\246\4\0\1\246\5\0"+
    "\2\246\27\0\1\247\4\0\1\247\5\0\2\247\27\0"+
    "\1\250\4\0\1\250\5\0\2\250\27\0\1\251\4\0"+
    "\1\251\5\0\2\251\27\0\1\252\4\0\1\252\5\0"+
    "\2\252\24\0\1\253\43\0\1\254\46\0\1\255\4\0"+
    "\1\255\5\0\2\255\27\0\1\256\4\0\1\256\5\0"+
    "\2\256\27\0\1\257\4\0\1\257\5\0\2\257\27\0"+
    "\1\260\4\0\1\260\5\0\2\260\27\0\1\261\4\0"+
    "\1\261\5\0\2\261\27\0\1\262\4\0\1\262\5\0"+
    "\2\262\27\0\1\263\4\0\1\263\5\0\2\263\27\0"+
    "\1\264\4\0\1\264\5\0\2\264\24\0\1\265\43\0"+
    "\1\266\46\0\1\267\4\0\1\267\5\0\2\267\27\0"+
    "\1\270\4\0\1\270\5\0\2\270\27\0\1\271\4\0"+
    "\1\271\5\0\2\271\27\0\1\272\4\0\1\272\5\0"+
    "\2\272\27\0\1\273\4\0\1\273\5\0\2\273\27\0"+
    "\1\274\4\0\1\274\5\0\2\274\27\0\1\275\4\0"+
    "\1\275\5\0\2\275\27\0\1\276\4\0\1\276\5\0"+
    "\2\276\27\0\1\277\4\0\1\277\5\0\2\277\27\0"+
    "\1\300\4\0\1\300\5\0\2\300\27\0\1\301\4\0"+
    "\1\301\5\0\2\301\27\0\1\302\4\0\1\302\5\0"+
    "\2\302\27\0\1\303\4\0\1\303\5\0\2\303\27\0"+
    "\1\304\4\0\1\304\5\0\2\304\27\0\1\305\4\0"+
    "\1\305\5\0\2\305\27\0\1\306\4\0\1\306\5\0"+
    "\2\306\27\0\1\307\4\0\1\307\5\0\2\307\27\0"+
    "\1\310\4\0\1\310\5\0\2\310\27\0\1\311\4\0"+
    "\1\311\5\0\2\311\27\0\1\312\4\0\1\312\5\0"+
    "\2\312\27\0\1\313\4\0\1\313\5\0\2\313\27\0"+
    "\1\314\4\0\1\314\5\0\2\314\27\0\1\315\4\0"+
    "\1\315\5\0\2\315\27\0\1\316\4\0\1\316\5\0"+
    "\2\316\11\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6264];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\1\1\11\7\1\1\11\7\1\1\11\5\1"+
    "\1\11\5\1\1\11\15\1\1\0\1\11\2\1\2\0"+
    "\1\1\1\0\1\11\1\0\1\1\3\11\1\0\1\11"+
    "\3\0\1\1\1\11\3\1\1\0\1\11\1\1\2\0"+
    "\1\1\1\0\1\11\1\0\1\1\3\11\1\0\1\1"+
    "\1\11\4\1\1\0\4\1\1\0\2\1\2\0\2\1"+
    "\1\0\4\1\1\0\2\1\1\0\3\1\1\0\3\1"+
    "\1\0\3\1\1\0\3\1\1\0\2\1\1\0\3\1"+
    "\1\0\2\1\1\0\3\1\1\0\2\1\1\0\3\1"+
    "\1\0\1\1\66\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public McFunctionLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL.charAt(zzMarkedPosL-1)) {
        case '\n':
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':  // fall through
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL.charAt(zzMarkedPosL) != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return STATIC_TEXT;
            }
          // fall through
          case 36: break;
          case 2:
            { return EX_SYNTAX;
            }
          // fall through
          case 37: break;
          case 3:
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 38: break;
          case 4:
            { return NUMBER;
            }
          // fall through
          case 39: break;
          case 5:
            { return OPERATOR;
            }
          // fall through
          case 40: break;
          case 6:
            { return ELEMENT;
            }
          // fall through
          case 41: break;
          case 7:
            { yybegin(MACRO_LINE); return MACRO_START;
            }
          // fall through
          case 42: break;
          case 8:
            { return COMMAND_NAME;
            }
          // fall through
          case 43: break;
          case 9:
            { yybegin(MESSAGE_ARGS); return COMMAND_NAME;
            }
          // fall through
          case 44: break;
          case 10:
            { return WHITE_SPACE;
            }
          // fall through
          case 45: break;
          case 11:
            { yybegin(MESSAGES); return NUMBER;
            }
          // fall through
          case 46: break;
          case 12:
            { yybegin(MESSAGES); return OPERATOR;
            }
          // fall through
          case 47: break;
          case 13:
            { yybegin(MESSAGES); return ELEMENT;
            }
          // fall through
          case 48: break;
          case 14:
            { yybegin(YYINITIAL); return McFunctionTypes.MESSAGES;
            }
          // fall through
          case 49: break;
          case 15:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 50: break;
          case 16:
            { return STRING;
            }
          // fall through
          case 51: break;
          case 17:
            { yybegin(YYINITIAL); return McFunctionTypes.COMMENT;
            }
          // fall through
          case 52: break;
          case 18:
            { return REF;
            }
          // fall through
          case 53: break;
          case 19:
            { return NAMESPACE;
            }
          // fall through
          case 54: break;
          case 20:
            { return TAG;
            }
          // fall through
          case 55: break;
          case 21:
            { return EMPTY_LIST;
            }
          // fall through
          case 56: break;
          case 22:
            { return CONTINUATION;
            }
          // fall through
          case 57: break;
          case 23:
            { return EMPTY_NBT;
            }
          // fall through
          case 58: break;
          case 24:
            { yybegin(MESSAGES); return STRING;
            }
          // fall through
          case 59: break;
          case 25:
            { yybegin(MESSAGES); return REF;
            }
          // fall through
          case 60: break;
          case 26:
            { yybegin(MESSAGES); return NAMESPACE;
            }
          // fall through
          case 61: break;
          case 27:
            { yybegin(MESSAGES); return TAG;
            }
          // fall through
          case 62: break;
          case 28:
            { yybegin(MESSAGES); return EMPTY_LIST;
            }
          // fall through
          case 63: break;
          case 29:
            { yybegin(MESSAGES); return EMPTY_NBT;
            }
          // fall through
          case 64: break;
          case 30:
            { return RANGE;
            }
          // fall through
          case 65: break;
          case 31:
            { yybegin(MESSAGES); return COMMAND_NAME;
            }
          // fall through
          case 66: break;
          case 32:
            { yybegin(MESSAGES); return RANGE;
            }
          // fall through
          case 67: break;
          case 33:
            { return MACRO;
            }
          // fall through
          case 68: break;
          case 34:
            { return UUID;
            }
          // fall through
          case 69: break;
          case 35:
            { yybegin(MESSAGES); return UUID;
            }
          // fall through
          case 70: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
